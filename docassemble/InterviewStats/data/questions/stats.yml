---
metadata:
  title: All Interview Statistics
  short title: view stats
  temporary session: True
  required privileges:
    - admin
---
features:
  javascript:
    - https://cdn.bokeh.org/bokeh/release/bokeh-2.3.0.min.js
    - https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.3.0.min.js
    - https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.3.0.min.js
---
modules:
  - .snapshot_statistics
  - .snapshot_geography
---
objects:
  - xlsx_output: DAFile.using(filename="stats.xlsx")
---
id: interview order
mandatory: True
code: |
  filename
  formatted_data
  saved_data
  viewed_filtered
---
code: |
  proper_name = space_to_underscore(filename) + "_stats"
  xlsx_output.initialize(filename=proper_name + ".xlsx")
  writer = pd.ExcelWriter(xlsx_output.path(),
    engine='xlsxwriter',
    options={'remove_timezone': True})
  formatted_data.to_excel(writer, index=False)
  writer.save()
  xlsx_output.commit()
  del writer
  saved_data = True
---
code: |
  geo_layout = make_usage_map(formatted_data)
  map_script, map_div, map_inline = get_embedable_usage_map(geo_layout)
  del geo_layout
---
question: |
  What interview do you want to view statistics for?
fields:
  - Filename: filename
    code: |
      [{interview.get('filename'): interview.get('title')} for interview in interview_menu()]
---
code: |
  interview_title = next(iter([interview.get('title') for interview in interview_menu() if interview.get('filename') == filename]), '(interview)')
---
code: |
  if filename is not None:
    if 'data/questions' in filename:
      stats = get_stats(filename)
    else:
      stats = get_stats(filename.replace(':',':data/questions/'))
  else:
    no_interview_stats
---
event: no_interview_stats
question: There are no interviews to look for data in!
subquestion: |
  There aren't any interviews that we can look for data in. There should be at least one interview
  listed in the 'dispatch' section of the configuration. See
  [the docassemble documentation](https://docassemble.org/docs/config.html#dispatch) for more information
buttons:
  - Exit: exit
---
need: stats
code: |
  try:
    first_row = next(iter(stats))
    if first_row and isinstance(first_row, tuple) and isinstance(first_row[1], dict):
      columns = list(first_row[1].keys())
    state_list = set([row[1]['state'] for row in stats])
  except Exception as ex:
    log('Columns will be blank because of: {}, {}'.format(ex.args, ex))
    columns = ['']
    state_list = []
---
code: |
  import operator
  import pandas as pd
---
code: |
  formatted_data = pd.DataFrame()
  if stats is not None:
    for stat in stats:
      stat[1]['modtime'] = stat[0]
    formatted_data = pd.DataFrame([stat[1] for stat in stats])
---
mandatory: True
id: view_data
question: |
  Stats for ${interview_title}: ${ len(stats) }
subquestion: |
  Total submissions: ${ len(stats) }

  % if len(stats):
  Group by:
  % for col in columns:
  [${col}](${ url_action('show_grouped_data', group_by = col ) }) |
  % endfor

  [:file-excel: Download](${ xlsx_output.url_for() })
  % endif
under: |
  ${ map_div }
fields:
  - Filter State: filter_state
    datatype: yesno
    disable if:
      code: |
        'state' not in formatted_data.columns or len(state_list) == 0
  - Find States that: state_op
    datatype: dropdown
    show if: filter_state
    code: |
      [{'eq': "equal"},
       {'ne': "don't equal"}]
  - this state: state_to_filter
    datatype: dropdown
    show if: filter_state
    code: |
      state_list
  - Filter by Date: filter_date
    datatype: yesno
    disable if:
      code: |
        'modtime' not in formatted_data.columns
  - Find submissions that are: date_op
    datatype: dropdown
    show if: filter_date
    code: |
      [{'gt': 'after'},
       {'lt': 'before'},
       {'eq': 'the same day as'}]
  - this date: date_to_filter
    datatype: date
    show if: filter_date
script: |
    ${ map_script}
continue button field: start_filter
continue button label: Filter
---
mandatory: True
depends on: filt_map_script, filt_map_div
need: filt_map_script, filt_map_div
id: view_filtered_data
question: |
  Filtered: ${ filter_description }
under: |
  ${ filt_map_div }
script: |
    ${ filt_map_script }
continue button field: viewed_filtered
continue button label: Finish stats
back button: True
---
event: show_grouped_data
question: |
  Total submissions: ${ len(stats) }
subquestion: |
  Group by:
  % for col in columns:
  [${col}](${ url_action('show_grouped_data', group_by = col)  })
  % endfor

  ${ formatted_data.groupby(by=action_argument('group_by')).count().to_html(classes=('table','table-striped')) }

  [:file-excel: Download](${ xlsx_output.url_for() })

  ${ map_div }
script: |
  ${ map_script }
buttons:
  - Restart: restart
---
need: start_filter
depends on: state_op, state_to_filter
code: |
  filter_list = []
  readable = {'state': 'State', 'modtime': 'Date',
              'eq': 'is', 'ne': 'is not', 'lt': '<', 'gt': '>'}
  if defined('filter_state') and filter_state:
    filter_list.append(('state', state_op, state_to_filter))
  if defined('filter_date') and filter_date:
    date_to_filter = date_to_filter.replace(tzinfo=None)
    filter_list.append(('modtime', date_op, date_to_filter))

  filter_description = ' and '.join(
      ['{} {} {}'.format(readable[elem[0]], readable[elem[1]], elem[2])
       for elem in filter_list])
  filters = get_filters_from_strings(filter_list)
  filt_geo_layout = make_usage_map(formatted_data, geo_col='zip',
                                   time_col='modtime', filters=filters)
  filt_map_script, filt_map_div, _ = get_embedable_usage_map(filt_geo_layout)
  del filt_geo_layout
